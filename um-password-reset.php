<?php/*Plugin Name: Password Reset for User Messages Plugin URI: http://um-password-reset.marvinlabs.comDescription: This plugin allows you to reset the password of the users having a given role and email them the new password. This plugin needs User Messages to work properly.Author: Marvin LabsVersion: 1.0.0Author URI: http://www.marvinlabs.com*//* Copyright 2008-2010 Marvin Labs */if (!class_exists('UMPR_PasswordResetPlugin')) {    /**    * Main plugin class    */    class UMPR_PasswordResetPlugin {                /** The version of the plugin */        var $version = "1.0.0";                /** The options of the plugin */        var $options = array();                /**        * Constructor        */        function UMPR_PasswordResetPlugin() {              $this->load_options();                    $this->define_constants();            $this->load_dependencies();               $this->register_hooks();    			$this->one_time_actions();           }                /**        * Load the options        */        function load_options() {            $this->options = get_option('umpr_options');         }                /**        * Save the options        */        function save_options() {            update_option('umpr_options', $this->options);        }                /**        * Called on plugin activation event        */        function on_activate() {			global $wpdb, $wp_roles;			            // Look at the active plugin version before we activate this one            //--            $active_version = $this->options['active_version'];						            if ($active_version==$this->version) {                // do nothing            } else {                             if (empty($active_version)) {                       // The plugin has never been installed                    //--                             $this->set_default_options();                                        add_option(                        'umpr_options',                         $this->options,                         'User Messages Password Reset plugin options');				} else {                                        // We already have a version of the plugin installed, update                    //--                }            }                        // Save the new active version             //--            $this->options['active_version'] = $this->version;                        // Save options            //--                                                                                                    $this->save_options();        }                /**        * Called on plugin deactivation event        */        function on_deactivate() {        }        				/**		* Send a POST request from the code		*/		function send_post_request($url, $referer, $_data) {	 			// convert variables array to string:			$data = array();    			while(list($n,$v) = each($_data)){				$data[] = "$n=$v";			}    			$data = implode('&', $data);			// format --> test1=a&test2=b etc.		 			// parse the given URL			$url = parse_url($url);			if ($url['scheme'] != 'http') { 				return array("", "false");			}		 			// extract host and path:			$host = $url['host'];			$path = $url['path'];		 			// open a socket connection on port 80			$fp = fsockopen($host, 80);			if (!$fp) { 				return array("", "false");			}							// send the request headers:			fputs($fp, "POST $path HTTP/1.1\r\n");			fputs($fp, "Host: $host\r\n");			fputs($fp, "Referer: $referer\r\n");			fputs($fp, "Content-type: application/x-www-form-urlencoded\r\n");			fputs($fp, "Content-length: ". strlen($data) ."\r\n");			fputs($fp, "Connection: close\r\n\r\n");			fputs($fp, $data);		 			$result = ''; 			while(!feof($fp)) {				// receive the results of the request				$result .= fgets($fp, 128);			}		 			// close the socket connection:			fclose($fp);		 			// split the result header from the content			$result = explode("\r\n\r\n", $result, 2);		 			$header = isset($result[0]) ? $result[0] : '';			$content = isset($result[1]) ? $result[1] : '';		 			// return as array:			return array($header, $content);		}	 		/**		* Do all one time actions that need to be done		*/		function one_time_actions() {            $current_time = time();            $last_register_attempt = empty( $this->options['last_register_attempt'] ) ? 0 : (int) $this->options['last_register_attempt'];            			if ( (string) $this->options['registered']!=$this->version && ( $current_time - $last_register_attempt > 600 ) ) {					$host = "http://www.vincentprat.info/wp_plugins_register.php";				$params = array(					'plugin_name' 		=> 'um-password-reset',					'plugin_version' 	=> $this->version,					'host' 				=> get_option('siteurl'),                    'valid' 			=> 'true'				);								$old_err_level = error_reporting(E_ERROR);				list($header, $content) = $this->send_post_request($host, get_option('siteurl'), $params);				error_reporting($old_err_level);								if ($content=='true') {					$this->options['registered'] = $this->version;				}                $this->options['last_register_attempt'] = time();				$this->save_options();			}		}                 /**        * Load the plugin text domain for internationalization        */                function load_textdomain() {                                                                                    load_plugin_textdomain("umpr", false, dirname(plugin_basename(__FILE__)) . '/lang');        }                                                         /**        * Register the WordPress hooks used by the plugin        */        function register_hooks() {			            register_activation_hook(dirname(__FILE__) . '/um-password-reset.php', array(&$this, 'on_activate'));            register_deactivation_hook(dirname(__FILE__) . '/um-password-reset.php', array(&$this, 'on_deactivate'));    									add_action('plugins_loaded', array(&$this, 'load_textdomain'));				add_action('um_mail_sent', array(&$this, 'on_um_mail_sent'), 1, 2);				add_filter('um_before_send_mail', array(&$this, 'replace_mail_tags'));        }                /**        * Define a few constants        */        function define_constants() {			define('UMPR_MAIL_SOURCE', 'um-password-reset');        }                /**        * Include all the files we need for the plugin        */        function load_dependencies() {			            if (is_admin()) {                require_once (dirname (__FILE__) . '/view/admin/AdminInterface.php');            } else {			}        }                /**        * Set default values for the options        */        function set_default_options() {			$this->options['password_length'] = 8;			$this->options['allowed_chars'] = 'abcdefghjkmnpqrstuvwxyzABCDEFGHJKLMNPRSTUVWXYZ23456789';            $this->options['notification_subject'] = __("Password changed on %BLOG_NAME%", "umpr");            $this->options['notification_body'] = __("Hi %RECIPIENT_NAME%,\n\nYour password on %BLOG_NAME% has been changed. Your new credentials are:\nLogin: %LOGIN%\nPassword: %PASSWORD%\n\nIn case of problem, please contact the administrator.\n\nHave a nice day!\n\n", "umpr") 						. __("This is an automatic email, please do not reply to it.", "umpr");        }				/**		* Return the users of the blog, sorted		*/		function get_roles_of_blog() {			global $wp_roles;			$roles = array_merge( $wp_roles->role_objects );			usort( $roles, create_function( '$a, $b', 'if (strtolower($a->name)==strtolower($b->name)) return 0; return (strtolower($a->name) < strtolower($b->name)) ? -1 : 1;' ) );			return $roles;		}				/**		* Get a new password		* @return The generated password		*/		function get_random_password($password_length, $allowed_chars) {				$i = 0; 			$pass = '' ; 			$max_num = strlen($allowed_chars);						while ($i < $password_length) { 						srand((double)microtime()*1000000); 				$num = rand(0, $max_num-1); 				$tmp = substr($allowed_chars, $num, 1); 				$pass = $pass . $tmp; 				$i++; 			} 			return $pass; 		}				/**		* Reset the password for the given roles		* @return An array with the login as key and the new password as value		*/		function reset_role_passwords($role_name, $password_length, $allowed_chars, $notification_subject, $notification_body) {			global $um_mailer, $user_ID;					if (!isset($um_mailer)) {				die("User Messages does not seem to be activated!");			}					$result = array();					//$batch_id = str_replace(array(" ", "."), "", microtime());			$users = get_users_of_blog();			foreach ($users as $u) {				$recipient =  new WP_User( $u->ID );								// Skip users not in role or current user				//--				if ( !$recipient->has_cap( $role_name ) || $user_ID==$recipient->ID) {					continue;				}							// Generate password				//--				$new_password = $this->get_random_password($password_length, $allowed_chars);								// Send message				//--							$um_mailer->send_mail($user_ID, 								$recipient->ID, 								$notification_subject, 								$notification_body, 								true, 								UMPR_MAIL_SOURCE, 	// This plugin is the source of the mail								$new_password);		// password as the new batch ID												$result[$recipient->user_login] = $new_password;			}						return $result;		}				/** 		* Function called when the mail is effectively sent to the user to inform him of his new password.		*/				function on_um_mail_sent($mail, $success) {			global $wpdb;			// Treat only mails issued by this plugin			//--			if (0===strcmp($mail->source, UMPR_MAIL_SOURCE)) {				// Only act if the mail has actually been sent				//--				if ($success!==FALSE) {					$recipient_id = $mail->recipient_id;					$password = $mail->batch_id;					// The following does not work, too many checks and conditions and blah blah					//--					// wp_update_user(array("ID" => $recipient_id, "user_pass" => $password));										// So we do it the ugly way, straight into the DB					//--					$password = wp_hash_password($password);					$wpdb->update($wpdb->users, array('user_pass' => $password), array('ID' => (int)$recipient_id), array('%s'), array('%d'));				} 			}		}				/**		* Function called before the mail is sent, allows us to replace variables in the mail		*/		function replace_mail_tags(&$mail) {			if (0!==strcmp($mail->source, UMPR_MAIL_SOURCE)) {				return $mail;			}			$recipient = $mail->get_recipient();			$new_password = $mail->batch_id;						$new_mail = new UM_Mail();			$new_mail->mail_id = $mail->mail_id;			$new_mail->author_id = $mail->author_id;			$new_mail->recipient_id = $mail->recipient_id;			$new_mail->type = $mail->type ;			$new_mail->is_plain_text = $mail->is_plain_text;			$new_mail->retries = $mail->retries;			$new_mail->is_sent = $mail->is_sent;			$new_mail->author = $mail->author ;			$new_mail->recipient = $mail->recipient;			$new_mail->batch_id = $mail->batch_id;			$new_mail->source = $mail->source;            			$new_mail->subject = str_replace('%BLOG_NAME%', get_bloginfo('name'), $mail->subject);			$new_mail->subject = str_replace('%RECIPIENT_NAME%', $recipient->display_name, $new_mail->subject);			$new_mail->content = str_replace('%LOGIN%', $recipient->user_login, $mail->content);			$new_mail->content = str_replace('%PASSWORD%', $new_password, $new_mail->content);			$new_mail->content = str_replace('%BLOG_NAME%', get_bloginfo('name'), $new_mail->content);			$new_mail->content = str_replace('%RECIPIENT_NAME%', $recipient->display_name, $new_mail->content);						return $new_mail;		}		    }	    // Start the plugin only if we are in the admin interface    //--               	global $umpr_plugin, $umpr_admin_interface; 	$umpr_plugin = new UMPR_PasswordResetPlugin();    		if (is_admin()) {		$umpr_admin_interface = new UMPR_AdminInterface();    } }